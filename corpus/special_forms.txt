============================================
Fn
============================================

(fn [a] a)

(fn [a b] (+ a b))

---

(source_file
  (fn
    parameters: (parameters
      (identifier))
    body: (identifier))
  (fn
    parameters: (parameters
      (identifier)
      (identifier))
    body: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (identifier)
      argument: (identifier))))

============================================
Defn
============================================

(defn void [])

(defn double [x] (* x 2))

---

(source_file
  (defn
    name: (identifier)
    parameters: (parameters))
  (defn
    name: (identifier)
    parameters: (parameters
      (identifier))
    body: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal))))

============================================
Let
============================================

(let [])

(let [a 10])

(let [a 10 b c])

(let [a 10] (double a))

---

(source_file
  (let
    pairs: (let_pairs))
  (let
    pairs: (let_pairs
      var: (identifier)
      expr: (integer_literal)))
  (let
    pairs: (let_pairs
      var: (identifier)
      expr: (integer_literal)
      var: (identifier)
      expr: (identifier)))
  (let
    pairs: (let_pairs
      var: (identifier)
      expr: (integer_literal))
    body: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (identifier))))

============================================
Do
============================================

(do a)

(do
    (+ a 10)
    (do b))

(let [a 10]
    (do (* a 2)))

---

(source_file
  (do
    expr: (identifier))
  (do
    expr: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal))
    expr: (do
      expr: (identifier)))
  (let
    pairs: (let_pairs
      var: (identifier)
      expr: (integer_literal))
    body: (do
      expr: (call_expression
        call_name: (call_name
          name: (identifier))
        argument: (identifier)
        argument: (integer_literal)))))

============================================
If
============================================

(if (< a 10)
    true
    false)

(if (< a 10)
    @a
    &a)

(if (= (% a 2) 0)
    (println* "Is even")
    (println* "Is odd"))

---

(source_file
  (if
    condition: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal))
    then: (bool_literal)
    else: (bool_literal))
  (if
    condition: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal))
    then: (short_copy
      (identifier))
    else: (short_ref
      (identifier)))
  (if
    condition: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (call_expression
        call_name: (call_name
          name: (identifier))
        argument: (identifier)
        argument: (integer_literal))
      argument: (integer_literal))
    then: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (str_literal))
    else: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (str_literal))))

============================================
While
============================================

(while (< a 10))

(while (< a 10)
  (+= a 1))

---

(source_file
  (while
    condition: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal)))
  (while
    condition: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal))
    body: (call_expression
      call_name: (call_name
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal))))

============================================
Ref
============================================

(ref a)

(func (ref a))

---

(source_file
  (ref
    expr: (identifier))
  (call_expression
    call_name: (call_name
      name: (identifier))
    argument: (ref
      expr: (identifier))))

============================================
Address
============================================
(address a)

---

(source_file
  (address
    expr: (identifier)))

============================================
Set!
============================================

(set! a 11)

(set! b (if (< b 10)
    (- b 1)
    (+ b 1)))

---

(source_file
  (set
    variable: (identifier)
    expr: (integer_literal))
  (set
    variable: (identifier)
    expr: (if
      condition: (call_expression
        call_name: (call_name
          name: (identifier))
        argument: (identifier)
        argument: (integer_literal))
      then: (call_expression
        call_name: (call_name
          name: (identifier))
        argument: (identifier)
        argument: (integer_literal))
      else: (call_expression
        call_name: (call_name
          name: (identifier))
        argument: (identifier)
        argument: (integer_literal)))))

============================================
The
============================================

(the Bool a)

(the (Ref Id) a)

---

(source_file
  (the
    type: (type
      (identifier))
    expr: (identifier))
  (the
    type: (type
      (identifier)
      (identifier))
    expr: (identifier)))
