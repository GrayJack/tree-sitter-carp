============================================
Fn
============================================

(fn [a] a)

(fn [a b] (+ a b))

; inside macros
(fn arguments)
(fn 'args 'doc)

---

(source_file
  (fn
    parameters: (parameters
      parameter: (symbol))
    body: (symbol))
  (fn
    parameters: (parameters
      parameter: (symbol)
      parameter: (symbol))
    body: (call
      name: (symbol)
      argument: (symbol)
      argument: (symbol)))
  (line_comment)
  (fn
    parameters: (symbol))
  (fn
    parameters: (short_quote
      (symbol))
    body: (short_quote
      (symbol))))

============================================
Let
============================================

(let [])

(let [a 10])

(let [a 10 b c])

(let [a 10] (double a))

(let (array variable from))

; inside macros
(let 'args 'body)

---

(source_file
  (let
    pairs: (pairs))
  (let
    pairs: (pairs
      var: (symbol)
      value: (integer_literal)))
  (let
    pairs: (pairs
      var: (symbol)
      value: (integer_literal)
      var: (symbol)
      value: (symbol)))
  (let
    pairs: (pairs
      var: (symbol)
      value: (integer_literal))
    body: (call
      name: (symbol)
      argument: (symbol)))
  (let
    pairs: (call
      name: (symbol)
      argument: (symbol)
      argument: (symbol)))
  (line_comment)
  (let
    pairs: (short_quote
      (symbol))
    body: (short_quote
      (symbol))))

============================================
Do
============================================

(do a)

(do
    (+ a 10)
    (do b))

(let [a 10]
    (do (* a 2)))

---

(source_file
  (do
    expr: (symbol))
  (do
    expr: (call
      name: (symbol)
      argument: (symbol)
      argument: (integer_literal))
    expr: (do
      expr: (symbol)))
  (let
    pairs: (pairs
      var: (symbol)
      value: (integer_literal))
    body: (do
      expr: (call
        name: (symbol)
        argument: (symbol)
        argument: (integer_literal)))))

============================================
If
============================================

(if (< a 10)
    true
    false)

(if (< a 10)
    @a
    &a)

(if (= (% a 2) 0)
    (println* "Is even")
    (println* "Is odd"))

---

(source_file
  (if
    condition: (call
      name: (symbol)
      argument: (symbol)
      argument: (integer_literal))
    then: (bool_literal)
    else: (bool_literal))
  (if
    condition: (call
      name: (symbol)
      argument: (symbol)
      argument: (integer_literal))
    then: (short_copy
      (symbol))
    else: (short_ref
      (symbol)))
  (if
    condition: (call
      name: (symbol)
      argument: (call
        name: (symbol)
        argument: (symbol)
        argument: (integer_literal))
      argument: (integer_literal))
    then: (call
      name: (symbol)
      argument: (str_literal))
    else: (call
      name: (symbol)
      argument: (str_literal))))

============================================
While
============================================

(while (< a 10))

(while (< a 10)
  (+= a 1))

---

(source_file
  (while
    condition: (call
      name: (symbol)
      argument: (symbol)
      argument: (integer_literal)))
  (while
    condition: (call
      name: (symbol)
      argument: (symbol)
      argument: (integer_literal))
    body: (call
      name: (symbol)
      argument: (symbol)
      argument: (integer_literal))))

============================================
Use
============================================

(use Array)
(use Color.Id)

; inside macro
(use (car names))

---

(source_file
  (use
    module: (module_symbol))
  (use
    module: (scoped_module
      path: (module_symbol)
      (symbol)))
  (line_comment)
  (use
    module: (call
      name: (symbol)
      argument: (symbol))))

============================================
With
============================================

(with Array
  (defn aaa [arr]
    (length arr)))

(with Mod
  (def item 10)
  (defn func [a] a))

---

(source_file
  (with
    module: (module_symbol)
    expr: (defn
      name: (symbol)
      parameters: (parameters
        parameter: (symbol))
      body: (call
        name: (symbol)
        argument: (symbol))))
  (with
    module: (module_symbol)
    expr: (def
      name: (symbol)
      value: (integer_literal))
    expr: (defn
      name: (symbol)
      parameters: (parameters
        parameter: (symbol))
      body: (symbol))))

============================================
Ref
============================================

(ref)
(ref a)
(func (ref a))

---

(source_file
  (ref)
  (ref
    (symbol))
  (call
    name: (symbol)
    argument: (ref
      (symbol))))

============================================
Address
============================================

(address a)

---

(source_file
  (address
    (symbol)))

============================================
Set!
============================================

(set! a 11)

(set! b (if (< b 10)
    (- b 1)
    (+ b 1)))

---

(source_file
  (set
    variable: (symbol)
    value: (integer_literal))
  (set
    variable: (symbol)
    value: (if
      condition: (call
        name: (symbol)
        argument: (symbol)
        argument: (integer_literal))
      then: (call
        name: (symbol)
        argument: (symbol)
        argument: (integer_literal))
      else: (call
        name: (symbol)
        argument: (symbol)
        argument: (integer_literal)))))

============================================
The
============================================

(the Bool a)

(the (Ref Id) a)

(the (Ref (Maybe a)) a)

---

(source_file
  (the
    type: (type
      (core_types))
    expr: (symbol))
  (the
    type: (type
      (complex_type
        (symbol)
        (core_types)))
    expr: (symbol))
  (the
    type: (type
      (complex_type
        (symbol)
        (complex_type
          (core_types)
          (symbol))))
    expr: (symbol)))


============================================
Match
============================================

(match a
  (Nothing) (zero)
  (Just x) x)

(match bool
  true (println* "true")
  false (println* "false"))

(match many
  (One) 1
  (Two) 2
  _ 3)

---

(source_file
  (match
    expr: (symbol)
    (match_case
      case: (call
        name: (symbol))
      body: (call
        name: (symbol)))
    (match_case
      case: (call
        name: (symbol)
        argument: (symbol))
      body: (symbol)))
  (match
    expr: (symbol)
    (match_case
      case: (bool_literal)
      body: (call
        name: (symbol)
        argument: (str_literal)))
    (match_case
      case: (bool_literal)
      body: (call
        name: (symbol)
        argument: (str_literal))))
  (match
    expr: (symbol)
    (match_case
      case: (call
        name: (symbol))
      body: (integer_literal))
    (match_case
      case: (call
        name: (symbol))
      body: (integer_literal))
    (match_case
      case: (symbol)
      body: (integer_literal))))
