============================================
Fn
============================================

(fn [a] a)

(fn [a b] (+ a b))

; inside macros
(fn arguments)

---

(source_file
  (fn
    parameters: (parameters
      (identifier))
    body: (identifier))
  (fn
    parameters: (parameters
      (identifier)
      (identifier))
    body: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (identifier)
      argument: (identifier)))
  (line_comment)
  (fn
    parameters: (parameter_ident
      (identifier))))

============================================
Defn
============================================

(defn void [])

(defn double [x] (* x 2))

(defn func [a]
  (do (this a))
  (do (that a)))

; inside macros
(defn name arguments)

---

(source_file
  (defn
    name: (identifier)
    parameters: (parameters))
  (defn
    name: (identifier)
    parameters: (parameters
      (identifier))
    body: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal)))
  (defn
    name: (identifier)
    parameters: (parameters
      (identifier))
    body: (do
      expr: (call
        call_name: (call_no_module
          name: (identifier))
        argument: (identifier)))
    body: (do
      expr: (call
        call_name: (call_no_module
          name: (identifier))
        argument: (identifier))))
  (line_comment)
  (defn
    name: (identifier)
    parameters: (parameter_ident
      (identifier))))

============================================
Let
============================================

(let [])

(let [a 10])

(let [a 10 b c])

(let [a 10] (double a))

(let (array variable from))

; inside macros
(list 'let bindings)

---

(source_file
  (let
    pairs: (let_pairs))
  (let
    pairs: (let_pairs
      var: (identifier)
      expr: (integer_literal)))
  (let
    pairs: (let_pairs
      var: (identifier)
      expr: (integer_literal)
      var: (identifier)
      expr: (identifier)))
  (let
    pairs: (let_pairs
      var: (identifier)
      expr: (integer_literal))
    body: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (identifier)))
  (let
    pairs: (let_array
      var: (identifier)
      expr: (identifier)))
  (line_comment)
  (call
    call_name: (call_no_module
      name: (identifier))
    argument: (quote_expression
      (let
        pairs: (let_ident
          (identifier))))))

============================================
Do
============================================

(do a)

(do
    (+ a 10)
    (do b))

(let [a 10]
    (do (* a 2)))

---

(source_file
  (do
    expr: (identifier))
  (do
    expr: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal))
    expr: (do
      expr: (identifier)))
  (let
    pairs: (let_pairs
      var: (identifier)
      expr: (integer_literal))
    body: (do
      expr: (call
        call_name: (call_no_module
          name: (identifier))
        argument: (identifier)
        argument: (integer_literal)))))

============================================
If
============================================

(if (< a 10)
    true
    false)

(if (< a 10)
    @a
    &a)

(if (= (% a 2) 0)
    (println* "Is even")
    (println* "Is odd"))

---

(source_file
  (if
    condition: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal))
    then: (bool_literal)
    else: (bool_literal))
  (if
    condition: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal))
    then: (short_copy
      (identifier))
    else: (short_ref
      (identifier)))
  (if
    condition: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (call
        call_name: (call_no_module
          name: (identifier))
        argument: (identifier)
        argument: (integer_literal))
      argument: (integer_literal))
    then: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (str_literal))
    else: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (str_literal))))

============================================
While
============================================

(while (< a 10))

(while (< a 10)
  (+= a 1))

---

(source_file
  (while
    condition: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal)))
  (while
    condition: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal))
    body: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (identifier)
      argument: (integer_literal))))

============================================
Use
============================================

(use Array)

; inside macro
(list 'use (car names))

---

(source_file
  (use
    module: (upper_identifier))
  (line_comment)
  (call
    call_name: (call_no_module
      name: (identifier))
    argument: (quote_expression
      (use
        module: (call
          call_name: (call_no_module
            name: (identifier))
          argument: (identifier))))))

============================================
With
============================================

(with Array
  (defn aaa [arr]
    (length arr)))

(with Mod
  (def item 10)
  (defn func [a] a))

---

(source_file
  (with
    module: (upper_identifier)
    expr: (defn
      name: (identifier)
      parameters: (parameters
        (identifier))
      body: (call
        call_name: (call_no_module
          name: (identifier))
        argument: (identifier))))
  (with
    module: (upper_identifier)
    expr: (def
      name: (identifier)
      value: (integer_literal))
    expr: (defn
      name: (identifier)
      parameters: (parameters
        (identifier))
      body: (identifier))))

============================================
Ref
============================================

(ref a)

(func (ref a))

---

(source_file
  (ref
    expr: (identifier))
  (call
    call_name: (call_no_module
      name: (identifier))
    argument: (ref
      expr: (identifier))))

============================================
Address
============================================
(address a)

---

(source_file
  (address
    expr: (identifier)))

============================================
Set!
============================================

(set! a 11)

(set! b (if (< b 10)
    (- b 1)
    (+ b 1)))

---

(source_file
  (set
    variable: (identifier)
    expr: (integer_literal))
  (set
    variable: (identifier)
    expr: (if
      condition: (call
        call_name: (call_no_module
          name: (identifier))
        argument: (identifier)
        argument: (integer_literal))
      then: (call
        call_name: (call_no_module
          name: (identifier))
        argument: (identifier)
        argument: (integer_literal))
      else: (call
        call_name: (call_no_module
          name: (identifier))
        argument: (identifier)
        argument: (integer_literal)))))

============================================
The
============================================

(the Bool a)

(the (Ref Id) a)

(the (Ref (Maybe a)) a)

---

(source_file
  (the
    type: (type
      (identifier))
    expr: (identifier))
  (the
    type: (type
      (complex_type
        (identifier)
        (identifier)))
    expr: (identifier))
  (the
    type: (type
      (complex_type
        (identifier)
        (complex_type
          (identifier)
          (identifier))))
    expr: (identifier)))


============================================
Match
============================================

(match a
  (Nothing) (zero)
  (Just x) x)

(match bool
  true (println* "true")
  false (println* "false"))

(match many
  (One) 1
  (Two) 2
  _ 3)

---

(source_file
  (match
    expr: (identifier)
    (match_case
      case: (call
        call_name: (call_no_module
          name: (upper_identifier)))
      body: (call
        call_name: (call_no_module
          name: (identifier))))
    (match_case
      case: (call
        call_name: (call_no_module
          name: (upper_identifier))
        argument: (identifier))
      body: (identifier)))
  (match
    expr: (identifier)
    (match_case
      case: (bool_literal)
      body: (call
        call_name: (call_no_module
          name: (identifier))
        argument: (str_literal)))
    (match_case
      case: (bool_literal)
      body: (call
        call_name: (call_no_module
          name: (identifier))
        argument: (str_literal))))
  (match
    expr: (identifier)
    (match_case
      case: (call
        call_name: (call_no_module
          name: (upper_identifier)))
      body: (integer_literal))
    (match_case
      case: (call
        call_name: (call_no_module
          name: (upper_identifier)))
      body: (integer_literal))
    (match_case
      case: (identifier)
      body: (integer_literal))))
