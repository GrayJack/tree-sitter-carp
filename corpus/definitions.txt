============================================
Def with identifiers
============================================

(def a b)

---

(source_file
  (def
    name: (identifier)
    value: (identifier)))

============================================
Def with literals
============================================

(def a true)

(def a false)

(def a 10)

(def a 10l)

(def a 10f)

(def a 10.0)

(def a 10.0f)

(def a \e)

(def a \\n)

(def a "str")

(def a "\n")

(def a #"pattern")

(def a #"\n")

---

(source_file
  (def
    name: (identifier)
    value: (bool_literal))
  (def
    name: (identifier)
    value: (bool_literal))
  (def
    name: (identifier)
    value: (integer_literal))
  (def
    name: (identifier)
    value: (integer_literal))
  (def
    name: (identifier)
    value: (float_literal))
  (def
    name: (identifier)
    value: (float_literal))
  (def
    name: (identifier)
    value: (float_literal))
  (def
    name: (identifier)
    value: (char_literal))
  (def
    name: (identifier)
    value: (char_literal
      (escape_sequence)))
  (def
    name: (identifier)
    value: (str_literal))
  (def
    name: (identifier)
    value: (str_literal
      (escape_sequence)))
  (def
    name: (identifier)
    value: (pattern_literal))
  (def
    name: (identifier)
    value: (pattern_literal)))

============================================
Def with Array
============================================

(def arr [1 2 a])

(def ref-arr &[a b c])

(def arr [[1 2] [3 4]])

---

(source_file
  (def
    name: (identifier)
    value: (array_expression
      (integer_literal)
      (integer_literal)
      (identifier)))
  (def
    name: (identifier)
    value: (short_ref
      (array_expression
        (identifier)
        (identifier)
        (identifier))))
  (def
    name: (identifier)
    value: (array_expression
      (array_expression
        (integer_literal)
        (integer_literal))
      (array_expression
        (integer_literal)
        (integer_literal)))))

============================================
Def with Map
============================================

(def m {1 1.0 2 2.2})

---

(source_file
  (def
    name: (identifier)
    value: (map_expression
      key: (integer_literal)
      value: (float_literal)
      key: (integer_literal)
      value: (float_literal))))

============================================
Definterface
============================================

(definterface = (λ [a a] Bool))

(definterface add-ref (Fn [&a &a] a))

(definterface frexp (λ [a (Ref Int)] a))

---

(source_file
  (definterface
    name: (identifier )
    fn: (interface_fn
      typed_params: (typed_parameters
        (type
          (identifier ))
        (type
          (identifier )))
      return_type: (type
        (identifier ))))
  (definterface
    name: (identifier )
    fn: (interface_fn
      typed_params: (typed_parameters
        (short_ref
          (identifier ))
        (short_ref
          (identifier )))
      return_type: (type
        (identifier ))))
  (definterface
    name: (identifier )
    fn: (interface_fn
      typed_params: (typed_parameters
        (type
          (identifier ))
        (type
          (complex_type
            (identifier )
            (identifier ))))
      return_type: (type
        (identifier )))))

============================================
Defmacro
============================================

(defmacro doc [name string]
  (list 'meta-set! name "doc" string))

(defmacro => [:rest forms]
  (thread-first-internal forms))

(defmacro define [var value] (list 'def var value))

---

(source_file
  (defmacro
    name: (identifier)
    parameters: (parameters
      (identifier)
      (identifier))
    body: (call
      name: (identifier)
      argument: (quote_expression
        (identifier))
      argument: (identifier)
      argument: (str_literal)
      argument: (identifier)))
  (defmacro
    name: (identifier)
    parameters: (parameters
      (symbol
        (identifier))
      (identifier))
    body: (call
      name: (identifier)
      argument: (identifier)))
  (defmacro
    name: (identifier)
    parameters: (parameters
      (identifier)
      (identifier))
    body: (call
      name: (identifier)
      argument: (quote_expression
        (def
          name: (identifier)
          value: (identifier))))))

============================================
Defndynamic
============================================

(defndynamic caar [pair] (car (car pair)))

---

(source_file
  (defndynamic
    name: (identifier)
    parameters: (parameters
      (identifier))
    body: (call
      name: (identifier)
      argument: (call
        name: (identifier)
        argument: (identifier)))))

============================================
Defmodule
============================================

(defmodule Double
  (def pi 3.141592653589793)
  (def e 2.718281828459045)
  (defn approx [x y]
    (Generics.approx x y)))

---

(source_file
  (defmodule
    name: (module_identifier)
    item: (def
      name: (identifier)
      value: (float_literal))
    item: (def
      name: (identifier)
      value: (float_literal))
    item: (defn
      name: (identifier)
      parameters: (parameters
        (identifier)
        (identifier))
      body: (call
        name: (scoped_identifier
          path: (module_identifier)
          (identifier))
        argument: (identifier)
        argument: (identifier)))))

============================================
Deftype
============================================

(deftype AAA [a Int b Double])

(deftype BBB [a (Array Int) b Double])

(deftype (Pair) [a Int, b Int])

(deftype (Pair a b) [a a b b])

(deftype MyEnum
    (Enum [])
    (Enum2 []))

(deftype (Maybe a)
  (Just [a])
  (Nothing []))

(deftype Enum
  Kind1
  Kind2
  Kind3)

---

(source_file
  (deftype
    name: (type_identifier)
    fields: (fields
      (identifier)
      (type)
      (identifier)
      (type)))
  (deftype
    name: (type_identifier)
    fields: (fields
      (identifier)
      (complex_type
        (identifier)
        (identifier))
      (identifier)
      (type)))
  (deftype
    name: (identifier)
    fields: (fields
      (identifier)
      (type)
      (identifier)
      (type)))
  (deftype
    name: (identifier)
    generic_type: (identifier)
    generic_type: (identifier)
    fields: (fields
      (identifier)
      (identifier)
      (identifier)
      (identifier)))
  (deftype
    name: (type_identifier)
    variant: (variant_identifier)
    fields: (fields)
    variant: (variant_identifier)
    fields: (fields))
  (deftype
    name: (identifier)
    generic_type: (identifier)
    variant: (variant_identifier)
    fields: (fields
      (identifier))
    variant: (variant_identifier)
    fields: (fields))
  (deftype
    name: (type_identifier)
    variant: (variant_identifier)
    variant: (variant_identifier)
    variant: (variant_identifier)))
