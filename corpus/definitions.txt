============================================
Def with identifiers
============================================

(def a b)
(def 'a 'b)
(def ðŸŽ· "saxophone")

---

(source_file
  (def
    name: (symbol)
    value: (symbol))
  (def
    name: (short_quote
      (symbol))
    value: (short_quote
      (symbol)))
  (def
    name: (symbol)
    value: (str_literal)))

============================================
Def with literals
============================================

(def a true)
(def a false)
(def a 10)
(def a 10l)
(def a 10f)
(def a 10.0)
(def a 10.0f)
(def a \e)
(def a \\n)
(def a "str")
(def a "\n")
(def a #"pattern")
(def a #"\n")

---

(source_file
  (def
    name: (symbol)
    value: (bool_literal))
  (def
    name: (symbol)
    value: (bool_literal))
  (def
    name: (symbol)
    value: (integer_literal))
  (def
    name: (symbol)
    value: (integer_literal))
  (def
    name: (symbol)
    value: (float_literal))
  (def
    name: (symbol)
    value: (float_literal))
  (def
    name: (symbol)
    value: (float_literal))
  (def
    name: (symbol)
    value: (char_literal))
  (def
    name: (symbol)
    value: (char_literal
      (escape_sequence)))
  (def
    name: (symbol)
    value: (str_literal))
  (def
    name: (symbol)
    value: (str_literal
      (escape_sequence)))
  (def
    name: (symbol)
    value: (pattern_literal))
  (def
    name: (symbol)
    value: (pattern_literal)))

============================================
Def with Array
============================================

(def arr [1 2 a])
(def ref-arr &[a b c])
(def arr [[1 2] [3 4]])

---

(source_file
  (def
    name: (symbol)
    value: (array
      item: (integer_literal)
      item: (integer_literal)
      item: (symbol)))
  (def
    name: (symbol)
    value: (short_ref
      (array
        item: (symbol)
        item: (symbol)
        item: (symbol))))
  (def
    name: (symbol)
    value: (array
      item: (array
        item: (integer_literal)
        item: (integer_literal))
      item: (array
        item: (integer_literal)
        item: (integer_literal)))))

============================================
Def with Map
============================================

(def m {1 1.0 2 2.2})

---

(source_file
  (def
    name: (symbol)
    value: (map
      key: (integer_literal)
      value: (float_literal)
      key: (integer_literal)
      value: (float_literal))))

============================================
Defn
============================================

(defn void [])

(defn double [x] (* x 2))

(defn func [a]
  (do
    (this a)
    (that a)))

; inside macros
(defn name arguments)
(defn 'name 'args 'body)


---

(source_file
  (defn
    name: (symbol)
    parameters: (parameters))
  (defn
    name: (symbol)
    parameters: (parameters
      parameter: (symbol))
    body: (call
      name: (symbol)
      argument: (symbol)
      argument: (integer_literal)))
  (defn
    name: (symbol)
    parameters: (parameters
      parameter: (symbol))
    body: (do
      expr: (call
        name: (symbol)
        argument: (symbol))
      expr: (call
        name: (symbol)
        argument: (symbol))))
  (line_comment)
  (defn
    name: (symbol)
    parameters: (symbol))
  (defn
    name: (short_quote
      (symbol))
    parameters: (short_quote
      (symbol))
    body: (short_quote
      (symbol))))

============================================
Definterface
============================================

(definterface = (Î» [a a] Bool))

(definterface add-ref (Fn [&a &a] a))

(definterface frexp (Î» [a (Ref Int)] a))

(definterface pi a)

---

(source_file
  (definterface
    name: (symbol)
    signature: (interface_fn
      type_parameters: (type_parameters
        (type
          (symbol))
        (type
          (symbol)))
      return_type: (type
        (core_types))))
  (definterface
    name: (symbol)
    signature: (interface_fn
      type_parameters: (type_parameters
        (short_ref
          (symbol))
        (short_ref
          (symbol)))
      return_type: (type
        (symbol))))
  (definterface
    name: (symbol)
    signature: (interface_fn
      type_parameters: (type_parameters
        (type
          (symbol))
        (type
          (complex_type
            (symbol)
            (core_types))))
      return_type: (type
        (symbol))))
  (definterface
    name: (symbol)
    value: (symbol)))

============================================
Defmacro
============================================

(defmacro doc [name string]
  (list 'meta-set! name "doc" string))

(defmacro => [:rest forms]
  (thread-first-internal forms))

(defmacro define [var value] (list 'def var value))

---

(source_file
  (defmacro
    name: (symbol)
    parameters: (parameters
      parameter: (symbol)
      parameter: (symbol))
    body: (call
      name: (symbol)
      argument: (short_quote
        (symbol))
      argument: (symbol)
      argument: (str_literal)
      argument: (symbol)))
  (defmacro
    name: (symbol)
    parameters: (parameters
      parameter: (keyword)
      parameter: (symbol)
      parameter: (symbol))
    body: (call
      name: (symbol)
      argument: (symbol)))
  (defmacro
    name: (symbol)
    parameters: (parameters
      parameter: (symbol)
      parameter: (symbol))
    body: (call
      name: (symbol)
      argument: (short_quote
        (symbol))
      argument: (symbol)
      argument: (symbol))))

============================================
Defndynamic
============================================

(defndynamic caar [pair] (car (car pair)))

---

(source_file
  (defndynamic
    name: (symbol)
    parameters: (parameters
      parameter: (symbol))
    body: (call
      name: (symbol)
      argument: (call
        name: (symbol)
        argument: (symbol)))))

============================================
Defmodule
============================================

(defmodule Double
  (def pi 3.141592653589793)
  (def e 2.718281828459045)
  (defn approx [x y]
    (Generics.approx x y)))

---

(source_file
  (defmodule
    name: (module_symbol)
    item: (def
      name: (symbol)
      value: (float_literal))
    item: (def
      name: (symbol)
      value: (float_literal))
    item: (defn
      name: (symbol)
      parameters: (parameters
        parameter: (symbol)
        parameter: (symbol))
      body: (call
        name: (scoped_identifier
          path: (module_symbol)
          (symbol))
        argument: (symbol)
        argument: (symbol)))))

============================================
Deftype
============================================

(deftype AAA [a Int b Double])

(deftype BBB [a (Array Int) b Double])

(deftype (Pair) [a Int, b Int])

(deftype (Pair a b) [a a b b])

(deftype MyEnum
    (Enum [])
    (Enum2 []))

(deftype (Maybe a)
  (Just [a])
  (Nothing []))

(deftype Enum
  Kind1
  Kind2
  Kind3)

---

(source_file
  (deftype
    name: (type_symbol)
    field: (field_symbol)
    type: (type
      (core_types))
    field: (field_symbol)
    type: (type
      (core_types)))
  (deftype
    name: (type_symbol)
    field: (field_symbol)
    type: (type
      (complex_type
        (core_types)
        (core_types)))
    field: (field_symbol)
    type: (type
      (core_types)))
  (deftype
    name: (type_symbol)
    field: (field_symbol)
    type: (type
      (core_types))
    field: (field_symbol)
    type: (type
      (core_types)))
  (deftype
    name: (type_symbol)
    generic_type: (generic_symbol)
    generic_type: (generic_symbol)
    field: (field_symbol)
    type: (type
      (symbol))
    field: (field_symbol)
    type: (type
      (symbol)))
  (deftype
    name: (type_symbol)
    variant: (variant_symbol)
    variant: (variant_symbol))
  (deftype
    name: (type_symbol)
    generic_type: (generic_symbol)
    variant: (variant_symbol)
    fields: (field_symbol)
    variant: (variant_symbol))
  (deftype
    name: (type_symbol)
    (variant_symbol)
    (variant_symbol)
    (variant_symbol)))
