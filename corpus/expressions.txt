============================================
Call expressions
============================================

(void)

(double x)

(* 2 10)

(~f a)

(Array.swap! a b)

(Maybe.Nothing)

(Maybe.Just a)

(zip &Pair.init-from-refs &(range 0 (length xs) 1) xs)

(Statistics.Summary.min res)

(call 'a 'b)

---

(source_file
  (call
    name: (symbol))
  (call
    name: (symbol)
    argument: (symbol))
  (call
    name: (symbol)
    argument: (integer_literal)
    argument: (integer_literal))
  (call
    name: (short_fn_ref
      (symbol))
    argument: (symbol))
  (call
    name: (scoped_identifier
      path: (module_symbol)
      (symbol))
    argument: (symbol)
    argument: (symbol))
  (call
    name: (scoped_identifier
      path: (module_symbol)
      (symbol)))
  (call
    name: (scoped_identifier
      path: (module_symbol)
      (symbol))
    argument: (symbol))
  (call
    name: (symbol)
    argument: (short_ref
      (scoped_identifier
        path: (module_symbol)
        (symbol)))
    argument: (short_ref
      (call
        name: (symbol)
        argument: (integer_literal)
        argument: (call
          name: (symbol)
          argument: (symbol))
        argument: (integer_literal)))
    argument: (symbol))
  (call
    name: (scoped_identifier
      path: (module_symbol)
      (scoped_identifier
        path: (module_symbol)
        (symbol)))
    argument: (symbol))
  (call
    name: (symbol)
    argument: (short_quote
      (symbol))
    argument: (short_quote
      (symbol))))

============================================
Map expressions
============================================

{a 10 b 10}

{(Black) @"30"
 (White) @"31"}

---

(source_file
  (map
    key: (symbol)
    value: (integer_literal)
    key: (symbol)
    value: (integer_literal))
  (map
    key: (call
      name: (symbol))
    value: (short_copy
      (str_literal))
    key: (call
      name: (symbol))
    value: (short_copy
      (str_literal))))

============================================
Quote expressions
============================================

(defmacro doc [name string]
  (list 'meta-set! name "doc" string))

(list '(c a b))

(list 'defn 'main [x] (list 'IO.println* form))

(defmacro define [var value] (list 'def var value))

---

(source_file
  (defmacro
    name: (symbol)
    parameters: (parameters
      parameter: (symbol)
      parameter: (symbol))
    body: (call
      name: (symbol)
      argument: (short_quote
        (symbol))
      argument: (symbol)
      argument: (str_literal)
      argument: (symbol)))
  (call
    name: (symbol)
    argument: (short_quote
      (call
        name: (symbol)
        argument: (symbol)
        argument: (symbol))))
  (call
    name: (symbol)
    argument: (short_quote
      (symbol))
    argument: (short_quote
      (symbol))
    argument: (array
      item: (symbol))
    argument: (call
      name: (symbol)
      argument: (short_quote
        (scoped_identifier
          path: (module_symbol)
          (symbol)))
      argument: (symbol)))
  (defmacro
    name: (symbol)
    parameters: (parameters
      parameter: (symbol)
      parameter: (symbol))
    body: (call
      name: (symbol)
      argument: (short_quote
        (symbol))
      argument: (symbol)
      argument: (symbol))))

============================================
Signature expressions
============================================

(sig func (Î» [Int] Int))
(sig func2 (Fn [Type] Type))
(sig Path.func (Fn [] Path))

---

(source_file
  (signature
    path: (symbol)
    signature: (interface_fn
      type_parameters: (type_parameters
        (type
          (core_types)))
      return_type: (type
        (core_types))))
  (signature
    path: (symbol)
    signature: (interface_fn
      type_parameters: (type_parameters
        (type
          (symbol)))
      return_type: (type
        (symbol))))
  (signature
    path: (scoped_identifier
      path: (module_symbol)
      (symbol))
    signature: (interface_fn
      type_parameters: (type_parameters)
      return_type: (type
        (symbol)))))

============================================
Doc expressions
============================================

(doc func "my doc")
(doc path.func "my func of path.func")

---

(source_file
  (doc
    path: (symbol)
    doc_str: (str_literal))
  (doc
    path: (scoped_identifier
      path: (module_symbol)
      (symbol))
    doc_str: (str_literal)))

============================================
hidden expressions
============================================

(hidden func)
(hidden path.func)

---

(source_file
  (hidden
    path: (symbol))
  (hidden
    path: (scoped_identifier
      path: (module_symbol)
      (symbol))))
