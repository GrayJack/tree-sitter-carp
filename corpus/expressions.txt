============================================
Call expressions
============================================

(void)

(double x)

(* 2 10)

(~f a)

(Array.swap! a b)

(Maybe.Nothing)

(Maybe.Just a)

(zip &Pair.init-from-refs &(range 0 (length xs) 1) xs)

(Statistics.Summary.min res)

(call 'a 'b)

---

(source_file
  (call
    call_name: (call_no_module
      name: (identifier)))
  (call
    call_name: (call_no_module
      name: (identifier))
    argument: (identifier))
  (call
    call_name: (call_no_module
      name: (identifier))
    argument: (integer_literal)
    argument: (integer_literal))
  (call
    call_name: (short_fn_ref
      (identifier))
    argument: (identifier))
  (call
    call_name: (call_with_module
      module: (upper_identifier)
      name: (identifier))
    argument: (identifier)
    argument: (identifier))
  (call
    call_name: (call_with_module
      module: (upper_identifier)
      name: (upper_identifier)))
  (call
    call_name: (call_with_module
      module: (upper_identifier)
      name: (upper_identifier))
    argument: (identifier))
  (call
    call_name: (call_no_module
      name: (identifier))
    argument: (short_ref
      (modular_identifier
        module: (upper_identifier)
        (identifier)))
    argument: (short_ref
      (call
        call_name: (call_no_module
          name: (identifier))
        argument: (integer_literal)
        argument: (call
          call_name: (call_no_module
            name: (identifier))
          argument: (identifier))
        argument: (integer_literal)))
    argument: (identifier))
  (call
    call_name: (call_with_module
      module: (upper_identifier)
      module: (upper_identifier)
      name: (identifier))
    argument: (identifier))
  (call
    call_name: (call_no_module
      name: (identifier))
    argument: (quote_expression
      (identifier))
    argument: (quote_expression
      (identifier))))


============================================
Map expressions
============================================

({a 10 b 10})

({(Black) @"30"
 (White) @"31"})

---

(source_file
  (map_expression
    key: (identifier)
    value: (integer_literal)
    key: (identifier)
    value: (integer_literal))
  (map_expression
    key: (call
      call_name: (call_no_module
        name: (upper_identifier)))
    value: (short_copy
      (str_literal))
    key: (call
      call_name: (call_no_module
        name: (upper_identifier)))
    value: (short_copy
      (str_literal))))

============================================
Quote expressions
============================================

(defmacro doc [name string]
  (list 'meta-set! name "doc" string))

(list '(c a b))

(list 'defn 'main [x] (list 'IO.println* form))

(defmacro define [var value] (list 'def var value))

---

(source_file
  (defmacro
    name: (identifier)
    parameters: (parameters
      (identifier)
      (identifier))
    body: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (quote_expression
        (identifier))
      argument: (identifier)
      argument: (str_literal)
      argument: (identifier)))
  (call
    call_name: (call_no_module
      name: (identifier))
    argument: (quote_expression
      (call
        call_name: (call_no_module
          name: (identifier))
        argument: (identifier)
        argument: (identifier))))
  (call
    call_name: (call_no_module
      name: (identifier))
    argument: (quote_expression
      (defn
        name: (quote_expression
          (identifier))
        parameters: (parameters
          (identifier))))
    argument: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (quote_expression
        (modular_identifier
          module: (upper_identifier)
          (identifier)))
      argument: (identifier)))
  (defmacro
    name: (identifier)
    parameters: (parameters
      (identifier)
      (identifier))
    body: (call
      call_name: (call_no_module
        name: (identifier))
      argument: (quote_expression
        (def
          name: (identifier)
          value: (identifier))))))
